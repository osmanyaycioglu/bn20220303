app:
  info:
    bounded-context: restaurant-order
    domain: restaurant
    microservice: ${spring.application.name}
server:
  port: ${my.port:10000}
spring:
  application:
    name: order
  config:
    import: configserver:http://127.0.0.1:8888
  cloud:
    loadbalancer:
      retry:
        enabled: true
        avoid-previous-instance: true
        max-retries-on-next-service-instance: 3
        max-retries-on-same-service-instance: 0
        retry-on-all-operations: true
feign:
  client:
    config:
      default:
        connect-timeout: 1000
        read-timeout: 5000
        request-interceptors:
        - com.training.spring.restclient.feign.FeignInterceptor
resilience4j:
  retry:
    metrics:
      enabled: true
    instances:
      abcretry:
        max-attempts: 2
        wait-duration: '0s'
        retry-exception-predicate: com.training.spring.resilience4j.RetryPredicate
  circuitbreaker:
    metrics:
      enabled: true
    instances:
      mycb:
        sliding-window-type: count-based
        sliding-window-size: 20
        minimum-number-of-calls: 10
        failure-rate-threshold: 30
        wait-duration-in-open-state: '4s'
        automatic-transition-from-open-to-half-open-enabled: false
        permitted-number-of-calls-in-half-open-state: 10
        max-wait-duration-in-half-open-state: '10s'
        slow-call-duration-threshold: 500
        slow-call-rate-threshold: 50
                  
          
